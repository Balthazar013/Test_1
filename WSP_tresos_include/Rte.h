#if !defined(RTE_H)
#define RTE_H

/**
 * \file
 *
 * \brief AUTOSAR Rte
 *
 * This file contains the implementation of the AUTOSAR
 * module Rte.
 *
 * \author Elektrobit Automotive GmbH, 91058 Erlangen, Germany
 *
 * Copyright 2005 - 2013 Elektrobit Automotive GmbH
 * All rights exclusively reserved for Elektrobit Automotive GmbH,
 * unless expressly agreed to otherwise.
 */

 /*
  * This file contains Rte hook declarations
  *
  * This file has been automatically generated by
  * EB tresos AutoCore Rte Generator Version 6.1.75
  * on Fri Feb 09 11:09:49 CET 2018. !!!IGNORE-LINE!!!
  */

 /* \addtogroup Rte Runtime Environment
  * @{ */

/*
 *  Misra deviations:
 *  - none -
 */

/*==================[inclusions]=============================================*/

#include <Std_Types.h>         /* AUTOSAR standard types */
#include <TSAutosar.h>         /* EB specific standard types */
#include <Rte_Version.h>       /* this module's version declaration */

/*==================[macros]=================================================*/

/*------------------[AUTOSAR vendor identification check]-------------------*/

#if (!defined RTE_VENDOR_ID) /* configuration check */
#error RTE_VENDOR_ID must be defined
#endif

#if (RTE_VENDOR_ID != 1U) /* vendor check */
#error RTE_VENDOR_ID has wrong vendor id
#endif

/*------------------[AUTOSAR release version identification check]----------*/

#if (!defined RTE_AR_RELEASE_MAJOR_VERSION) /* configuration check */
#error RTE_AR_RELEASE_MAJOR_VERSION must be defined
#endif

/* major version check */
#if (RTE_AR_RELEASE_MAJOR_VERSION != 4U)
#error RTE_AR_RELEASE_MAJOR_VERSION wrong (!= 4U)
#endif

#if (!defined RTE_AR_RELEASE_MINOR_VERSION) /* configuration check */
#error RTE_AR_RELEASE_MINOR_VERSION must be defined
#endif

/* minor version check */
#if (RTE_AR_RELEASE_MINOR_VERSION != 0U )
#error RTE_AR_RELEASE_MINOR_VERSION wrong (!= 0U)
#endif

#if (!defined RTE_AR_RELEASE_REVISION_VERSION) /* configuration check */
#error RTE_AR_RELEASE_REVISION_VERSION must be defined
#endif

/* revision version check */
#if (RTE_AR_RELEASE_REVISION_VERSION != 3U )
#error RTE_AR_RELEASE_REVISION_VERSION wrong (!= 3U)
#endif

/*------------------[AUTOSAR module version identification check]-----------*/

#if (!defined RTE_SW_MAJOR_VERSION) /* configuration check */
#error RTE_SW_MAJOR_VERSION must be defined
#endif

/* major version check */
#if (RTE_SW_MAJOR_VERSION != 6U)
#error RTE_SW_MAJOR_VERSION wrong (!= 6U)
#endif

#if (!defined RTE_SW_MINOR_VERSION) /* configuration check */
#error RTE_SW_MINOR_VERSION must be defined
#endif

/* minor version check */
#if (RTE_SW_MINOR_VERSION < 1U)
#error RTE_SW_MINOR_VERSION wrong (< 1U)
#endif

#if (!defined RTE_SW_PATCH_VERSION) /* configuration check */
#error RTE_SW_PATCH_VERSION must be defined
#endif

/* patch version check */
#if (RTE_SW_PATCH_VERSION < 75U)
#error RTE_SW_PATCH_VERSION wrong (< 75U)
#endif

/*------------------[RTE Error Codes ]--------------------------------------*/

#if (defined RTE_E_OK) /* to prevent double declaration */
#error RTE_E_OK already defined
#endif /* if (defined RTE_E_OK) */

/** \brief Definition of error code: No error occured  */
#define RTE_E_OK     ((Std_ReturnType) 0)

#if (defined RTE_E_INVALID) /* to prevent double declaration */
#error RTE_E_INVALID already defined
#endif /* if (defined RTE_E_INVALID) */

/** \brief Definition of error code: An invalidated signal was received */
#define RTE_E_INVALID    ((Std_ReturnType) 1)

#if (defined RTE_E_COMMS_ERROR) /* to prevent double declaration */
#error RTE_E_COMMS_ERROR already defined
#endif /* if (defined RTE_E_COMMS_ERROR) */

/** \brief Definition of error code: A communication's error occurred
           defined due to backward compatiblity to AUTOSAR 2.1 */
#define RTE_E_COMMS_ERROR     ((Std_ReturnType) 128)

#if (defined RTE_E_COM_STOPPED) /* to prevent double declaration */
#error RTE_E_COM_STOPPED already defined
#endif /* if (defined RTE_E_COM_STOPPED) */

/** \brief Definition of error code: A communication's error occurred  */
#define RTE_E_COM_STOPPED     ((Std_ReturnType) 128)

#if (defined RTE_E_TIMEOUT) /* to prevent double declaration */
#error RTE_E_TIMEOUT already defined
#endif /* if (defined RTE_E_TIMEOUT) */

/** \brief Definition of error code: API call returned due to a timeout */
#define RTE_E_TIMEOUT    ((Std_ReturnType) 129)

#if (defined RTE_E_LIMIT) /* to prevent double declaration */
#error RTE_E_LIMIT already defined
#endif /* if (defined RTE_E_LIMIT) */

/** \brief Definition of error code: Internal limit has been exceeded */
#define RTE_E_LIMIT     ((Std_ReturnType) 130)

#if (defined RTE_E_NO_DATA) /* to prevent double declaration */
#error RTE_E_NO_DATA already defined
#endif /* if (defined RTE_E_NO_DATA) */

/** \brief Definition of error code: An explicit API call returned no data */
#define RTE_E_NO_DATA     ((Std_ReturnType) 131)

#if (defined RTE_E_TRANSMIT_ACK) /* to prevent double declaration */
#error RTE_E_TRANSMIT_ACK already defined
#endif /* if (defined RTE_E_TRANSMIT_ACK) */

/** \brief Definition of status code: Transmission acknowledge received */
#define RTE_E_TRANSMIT_ACK    ((Std_ReturnType) 132)

#if (defined RTE_E_NEVER_RECEIVED) /* to prevent double declaration */
#error RTE_E_NEVER_RECEIVED already defined
#endif /* if (defined RTE_E_NEVER_RECEIVED) */

/** \brief Definition of status code: No data received for the corresponding
           unqueued data element since system start or partition restart.
 */
#define RTE_E_NEVER_RECEIVED    ((Std_ReturnType) 133)

#if (defined RTE_E_LOST_DATA) /* to prevent double declaration */
#error RTE_E_LOST_DATA already defined
#endif /* if (defined RTE_E_LOST_DATA) */

/** \brief Definition of error code: data lost */
#define RTE_E_LOST_DATA    ((Std_ReturnType) 64)

#if (defined RTE_E_MAX_AGE_EXCEEDED) /* to prevent double declaration */
#error RTE_E_MAX_AGE_EXCEEDED already defined
#endif /* if (defined RTE_E_MAX_AGE_EXCEEDED) */

/** \brief Definition of error code: data lost */
#define RTE_E_MAX_AGE_EXCEEDED    ((Std_ReturnType) 64)

#if (defined RTE_E_SHUTDOWN_NOTIFICATION) /* to prevent double declaration */
#error RTE_E_SHUTDOWN_NOTIFICATION already defined
#endif /* if (defined RTE_E_SHUTDOWN_NOTIFICATION) */

/** \brief Definition of error code: A shutdown notification was received
           (non standard)  */
#define RTE_E_SHUTDOWN_NOTIFICATION    ((Std_ReturnType) 156)

#if (defined RTE_E_UNCONNECTED) /* to prevent double declaration */
#error RTE_E_UNCONNECTED already defined
#endif /* if (defined RTE_E_UNCONNECTED) */

/** \brief Definition of error code: Port is not connected */
#define RTE_E_UNCONNECTED    ((Std_ReturnType) 134)

#if (defined RTE_E_UNKNOWN_ERROR) /* to prevent double declaration */
#error RTE_E_UNKNOWN_ERROR already defined
#endif /* if (defined RTE_E_UNKNOWN_ERROR) */

/** \brief Definition of error code: An unknown error occured
           (non standard)  */
#define RTE_E_UNKNOWN_ERROR    ((Std_ReturnType) 254)

#if (defined SCHM_E_OK) /* to prevent double declaration */
#error SCHM_E_OK already defined
#endif /* if (defined SCHM_E_OK) */

/** \brief Definition of error code: No error occurred  */
#define SCHM_E_OK    ((Std_ReturnType) 0)

#if (defined SCHM_E_TIMEOUT) /* to prevent double declaration */
#error SCHM_E_TIMEOUT already defined
#endif /* if (defined SCHM_E_TIMEOUT) */

/** \brief Definition of error code: The configured timeout exceeds before the
           intended result was ready */
#define SCHM_E_TIMEOUT    ((Std_ReturnType) 129)

#if (defined SCHM_E_LIMIT) /* to prevent double declaration */
#error SCHM_E_LIMIT already defined
#endif /* if (defined SCHM_E_LIMIT) */

/** \brief Definition of error code: An internal Basic Software Scheduler limit
           has been exceeded. The request could not be handled. OUT buffers
           were not modified. */
#define SCHM_E_LIMIT    ((Std_ReturnType) 130)

#if (defined SCHM_E_NO_DATA) /* to prevent double declaration */
#error SCHM_E_NO_DATA already defined
#endif /* if (defined SCHM_E_NO_DATA) */

/** \brief Definition of error code: An explicit read API call returned no
           data. (This is not an error.) */
#define SCHM_E_NO_DATA    ((Std_ReturnType) 131)

#if (defined SCHM_E_TRANSMIT_ACK) /* to prevent double declaration */
#error SCHM_E_TRANSMIT_ACK already defined
#endif /* if (defined SCHM_E_TRANSMIT_ACK) */

/** \brief Definition of error code: Transmission acknowledgement received */
#define SCHM_E_TRANSMIT_ACK    ((Std_ReturnType) 132)

#if (defined SCHM_E_IN_EXCLUSIVE_AREA) /* to prevent double declaration */
#error SCHM_E_IN_EXCLUSIVE_AREA already defined
#endif /* if (defined SCHM_E_IN_EXCLUSIVE_AREA) */

/** \brief Definition of error code: The error is returned by a blocking API
           and indicates that the schedulable entity could not enter a wait
           state, because one ExecutableEntity of the current task's call
           stack has entered or is running in an ExclusiveArea. */
#define SCHM_E_IN_EXCLUSIVE_AREA    ((Std_ReturnType) 135)

/*==================[type definitions]=======================================*/

/*==================[external function declarations]=========================*/

/*==================[internal function declarations]=========================*/

/*==================[external constants]=====================================*/

/*==================[internal constants]=====================================*/

/*==================[external data]==========================================*/

/*==================[internal data]==========================================*/

/*==================[external function definitions]==========================*/

/*==================[internal function definitions]==========================*/
/** @} doxygen end group definition */
#endif /* !defined(RTE_H) */
/*==================[end of file]============================================*/

